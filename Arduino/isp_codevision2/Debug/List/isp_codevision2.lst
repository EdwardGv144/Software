
AVRASM ver. 2.1.30  C:\Users\alan_\OneDrive\Documents\Centro de Diseño\Diseño\Software\Arduino\isp_codevision2\Debug\List\isp_codevision2.asm Wed Jul 22 16:21:36 2020

C:\Users\alan_\OneDrive\Documents\Centro de Diseño\Diseño\Software\Arduino\isp_codevision2\Debug\List\isp_codevision2.asm(1086): warning: Register r4 already defined by the .DEF directive
C:\Users\alan_\OneDrive\Documents\Centro de Diseño\Diseño\Software\Arduino\isp_codevision2\Debug\List\isp_codevision2.asm(1087): warning: Register r3 already defined by the .DEF directive
C:\Users\alan_\OneDrive\Documents\Centro de Diseño\Diseño\Software\Arduino\isp_codevision2\Debug\List\isp_codevision2.asm(1088): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.42 Evaluation
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32U4
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 640 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32U4
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2560
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR1A=0xC8
                 	.EQU UDR1=0xCE
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x0AFF
                 	.EQU __DSTACK_SIZE=0x0280
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R3
                 	.DEF __lcd_maxx=R6
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 006a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
000046 940c 0000 	JMP  0x00
000048 940c 01fa 	JMP  _twi_int_handler
00004a 940c 0000 	JMP  0x00
00004c 940c 0000 	JMP  0x00
00004e 940c 0000 	JMP  0x00
000050 940c 0000 	JMP  0x00
000052 940c 0000 	JMP  0x00
000054 940c 0000 	JMP  0x00
                 
                 _tbl10_G105:
000056 2710
000057 03e8
000058 0064
000059 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00005a 0001      	.DB  0x1,0x0
                 _tbl16_G105:
00005b 1000
00005c 0100
00005d 0010
00005e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
00005f 7525
C:\Users\alan_\OneDrive\Documents\Centro de Diseño\Diseño\Software\Arduino\isp_codevision2\Debug\List\isp_codevision2.asm(1151): warning: .cseg .db misalignment - padding zero byte
000060 0000      	.DB  0x25,0x75,0x0
                 _0x2000003:
C:\Users\alan_\OneDrive\Documents\Centro de Diseño\Diseño\Software\Arduino\isp_codevision2\Debug\List\isp_codevision2.asm(1153): warning: .cseg .db misalignment - padding zero byte
000061 0007      	.DB  0x7
                 _0x2020003:
000062 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000063 0001      	.DW  0x01
000064 0382      	.DW  _twi_result
000065 00c2      	.DW  _0x2000003*2
                 
000066 0002      	.DW  0x02
000067 038f      	.DW  __base_y_G101
000068 00c4      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000069 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00006a 94f8      	CLI
00006b 27ee      	CLR  R30
00006c bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00006d e0f1      	LDI  R31,1
00006e bff5      	OUT  MCUCR,R31
00006f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000070 e08d      	LDI  R24,(14-2)+1
000071 e0a2      	LDI  R26,2
000072 27bb      	CLR  R27
                 __CLEAR_REG:
000073 93ed      	ST   X+,R30
000074 958a      	DEC  R24
000075 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000076 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000077 e09a      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000078 e0a0      	LDI  R26,LOW(__SRAM_START)
000079 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00007a 93ed      	ST   X+,R30
00007b 9701      	SBIW R24,1
00007c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00007d ece6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00007e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007f 9185      	LPM  R24,Z+
000080 9195      	LPM  R25,Z+
000081 9700      	SBIW R24,0
000082 f061      	BREQ __GLOBAL_INI_END
000083 91a5      	LPM  R26,Z+
000084 91b5      	LPM  R27,Z+
000085 9005      	LPM  R0,Z+
000086 9015      	LPM  R1,Z+
000087 01bf      	MOVW R22,R30
000088 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000089 9005      	LPM  R0,Z+
00008a 920d      	ST   X+,R0
00008b 9701      	SBIW R24,1
00008c f7e1      	BRNE __GLOBAL_INI_LOOP
00008d 01fb      	MOVW R30,R22
00008e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00008f e0e0      	LDI  R30,__GPIOR0_INIT
000090 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000091 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000092 bfed      	OUT  SPL,R30
000093 e0ea      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000094 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000095 e8c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000096 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000097 940c 00c0 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x380
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                      .EQU __sm_adc_noise_red=0x02 // 26022010_1
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 002E {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 002F ADMUX=(adc_input & 0x1f) | ADC_VREF_TYPE;
000099 931a      	ST   -Y,R17
00009a 2f1a      	MOV  R17,R26
                 ;	adc_input -> R17
00009b 2fe1      	MOV  R30,R17
00009c 71ef      	ANDI R30,LOW(0x1F)
00009d 66e0      	ORI  R30,LOW(0x60)
00009e 93e0 007c 	STS  124,R30
                 ; 0000 0030 if (adc_input & 0x20) ADCSRB|=(1<<MUX5);
0000a0 ff15      	SBRS R17,5
0000a1 c004      	RJMP _0x3
0000a2 91e0 007b 	LDS  R30,123
0000a4 62e0      	ORI  R30,0x20
0000a5 c003      	RJMP _0xC
                 ; 0000 0031 else ADCSRB&= ~(1<<MUX5);
                 _0x3:
0000a6 91e0 007b 	LDS  R30,123
0000a8 7def      	ANDI R30,0xDF
                 _0xC:
0000a9 93e0 007b 	STS  123,R30
                 ; 0000 0032 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0033 delay_us(10);
                +
0000ab e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
0000ac 958a     +DEC R24
0000ad f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ; 0000 0034 // Start the AD conversion
                 ; 0000 0035 ADCSRA|=(1<<ADSC);
0000ae 91e0 007a 	LDS  R30,122
0000b0 64e0      	ORI  R30,0x40
0000b1 93e0 007a 	STS  122,R30
                 ; 0000 0036 // Wait for the AD conversion to complete
                 ; 0000 0037 while ((ADCSRA & (1<<ADIF))==0);
                 _0x5:
0000b3 91e0 007a 	LDS  R30,122
0000b5 71e0      	ANDI R30,LOW(0x10)
0000b6 f3e1      	BREQ _0x5
                 ; 0000 0038 ADCSRA|=(1<<ADIF);
0000b7 91e0 007a 	LDS  R30,122
0000b9 61e0      	ORI  R30,0x10
0000ba 93e0 007a 	STS  122,R30
                 ; 0000 0039 return ADCH;
0000bc 91e0 0079 	LDS  R30,121
0000be 940c 03d1 	JMP  _0x20E0002
                 ; 0000 003A }
                 ; .FEND
                 ;void main(void)
                 ; 0000 003D {
                 _main:
                 ; .FSTART _main
                 ; 0000 003E // Declare your local variables here
                 ; 0000 003F 
                 ; 0000 0040 // Crystal Oscillator division factor: 1
                 ; 0000 0041 #pragma optsize-
                 ; 0000 0042 CLKPR=(1<<CLKPCE);
0000c0 e8e0      	LDI  R30,LOW(128)
0000c1 93e0 0061 	STS  97,R30
                 ; 0000 0043 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
0000c3 e0e0      	LDI  R30,LOW(0)
0000c4 93e0 0061 	STS  97,R30
                 ; 0000 0044 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0045 #pragma optsize+
                 ; 0000 0046 #endif
                 ; 0000 0047 
                 ; 0000 0048 // Input/Output Ports initialization
                 ; 0000 0049 // Port B initialization
                 ; 0000 004A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 004B DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000c6 e0e8      	LDI  R30,LOW(8)
0000c7 b9e4      	OUT  0x4,R30
                 ; 0000 004C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0000 004D PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000c8 e0e0      	LDI  R30,LOW(0)
0000c9 b9e5      	OUT  0x5,R30
                 ; 0000 004E 
                 ; 0000 004F // Port C initialization
                 ; 0000 0050 // Function: Bit7=In Bit6=In
                 ; 0000 0051 DDRC=(0<<DDC7) | (0<<DDC6);
0000ca b9e7      	OUT  0x7,R30
                 ; 0000 0052 // State: Bit7=T Bit6=T
                 ; 0000 0053 PORTC=(0<<PORTC7) | (0<<PORTC6);
0000cb b9e8      	OUT  0x8,R30
                 ; 0000 0054 
                 ; 0000 0055 // Port D initialization
                 ; 0000 0056 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0057 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000cc b9ea      	OUT  0xA,R30
                 ; 0000 0058 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0059 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000cd b9eb      	OUT  0xB,R30
                 ; 0000 005A 
                 ; 0000 005B // Port E initialization
                 ; 0000 005C // Function: Bit6=In Bit2=In
                 ; 0000 005D DDRE=(0<<DDE6) | (0<<DDE2);
0000ce b9ed      	OUT  0xD,R30
                 ; 0000 005E // State: Bit6=T Bit2=T
                 ; 0000 005F PORTE=(0<<PORTE6) | (0<<PORTE2);
0000cf b9ee      	OUT  0xE,R30
                 ; 0000 0060 
                 ; 0000 0061 // Port F initialization
                 ; 0000 0062 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit1=In Bit0=In
                 ; 0000 0063 DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF1) | (0<<DDF0);
0000d0 bbe0      	OUT  0x10,R30
                 ; 0000 0064 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit1=T Bit0=T
                 ; 0000 0065 PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF1) | (0<<PORTF0);
0000d1 bbe1      	OUT  0x11,R30
                 ; 0000 0066 
                 ; 0000 0067 PLLCSR=(0<<PINDIV) | (0<<PLLE) | (0<<PLOCK);
0000d2 bde9      	OUT  0x29,R30
                 ; 0000 0068 PLLFRQ=(0<<PINMUX) | (0<<PLLUSB) | (0<<PLLTM1) | (0<<PLLTM0) | (0<<PDIV3) | (0<<PDIV2) | (0<<PDIV1) | (0<<PDIV0);
0000d3 bfe2      	OUT  0x32,R30
                 ; 0000 0069 
                 ; 0000 006A // Timer/Counter 0 initialization
                 ; 0000 006B // Clock source: System Clock
                 ; 0000 006C // Clock value: Timer 0 Stopped
                 ; 0000 006D // Mode: Normal top=0xFF
                 ; 0000 006E // OC0A output: Disconnected
                 ; 0000 006F // OC0B output: Disconnected
                 ; 0000 0070 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
0000d4 bde4      	OUT  0x24,R30
                 ; 0000 0071 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000d5 bde5      	OUT  0x25,R30
                 ; 0000 0072 TCNT0=0x00;
0000d6 bde6      	OUT  0x26,R30
                 ; 0000 0073 OCR0A=0x00;
0000d7 bde7      	OUT  0x27,R30
                 ; 0000 0074 OCR0B=0x00;
0000d8 bde8      	OUT  0x28,R30
                 ; 0000 0075 
                 ; 0000 0076 // Timer/Counter 1 initialization
                 ; 0000 0077 // Clock source: System Clock
                 ; 0000 0078 // Clock value: Timer1 Stopped
                 ; 0000 0079 // Mode: Normal top=0xFFFF
                 ; 0000 007A // OC1A output: Disconnected
                 ; 0000 007B // OC1B output: Disconnected
                 ; 0000 007C // OC1C output: Disconnected
                 ; 0000 007D // Noise Canceler: Off
                 ; 0000 007E // Input Capture on Falling Edge
                 ; 0000 007F // Timer1 Overflow Interrupt: Off
                 ; 0000 0080 // Input Capture Interrupt: Off
                 ; 0000 0081 // Compare A Match Interrupt: Off
                 ; 0000 0082 // Compare B Match Interrupt: Off
                 ; 0000 0083 // Compare C Match Interrupt: Off
                 ; 0000 0084 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
0000d9 93e0 0080 	STS  128,R30
                 ; 0000 0085 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000db 93e0 0081 	STS  129,R30
                 ; 0000 0086 TCNT1H=0x00;
0000dd 93e0 0085 	STS  133,R30
                 ; 0000 0087 TCNT1L=0x00;
0000df 93e0 0084 	STS  132,R30
                 ; 0000 0088 ICR1H=0x00;
0000e1 93e0 0087 	STS  135,R30
                 ; 0000 0089 ICR1L=0x00;
0000e3 93e0 0086 	STS  134,R30
                 ; 0000 008A OCR1AH=0x00;
0000e5 93e0 0089 	STS  137,R30
                 ; 0000 008B OCR1AL=0x00;
0000e7 93e0 0088 	STS  136,R30
                 ; 0000 008C OCR1BH=0x00;
0000e9 93e0 008b 	STS  139,R30
                 ; 0000 008D OCR1BL=0x00;
0000eb 93e0 008a 	STS  138,R30
                 ; 0000 008E OCR1CH=0x00;
0000ed 93e0 008d 	STS  141,R30
                 ; 0000 008F OCR1CL=0x00;
0000ef 93e0 008c 	STS  140,R30
                 ; 0000 0090 
                 ; 0000 0091 // Timer/Counter 3 initialization
                 ; 0000 0092 // Clock source: System Clock
                 ; 0000 0093 // Clock value: Timer3 Stopped
                 ; 0000 0094 // Mode: Normal top=0xFFFF
                 ; 0000 0095 // OC3A output: Disconnected
                 ; 0000 0096 // OC3B output: Disconnected
                 ; 0000 0097 // OC3C output: Disconnected
                 ; 0000 0098 // Noise Canceler: Off
                 ; 0000 0099 // Input Capture on Falling Edge
                 ; 0000 009A // Timer3 Overflow Interrupt: Off
                 ; 0000 009B // Input Capture Interrupt: Off
                 ; 0000 009C // Compare A Match Interrupt: Off
                 ; 0000 009D // Compare B Match Interrupt: Off
                 ; 0000 009E // Compare C Match Interrupt: Off
                 ; 0000 009F TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
0000f1 93e0 0090 	STS  144,R30
                 ; 0000 00A0 TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
0000f3 93e0 0091 	STS  145,R30
                 ; 0000 00A1 TCNT3H=0x00;
0000f5 93e0 0095 	STS  149,R30
                 ; 0000 00A2 TCNT3L=0x00;
0000f7 93e0 0094 	STS  148,R30
                 ; 0000 00A3 ICR3H=0x00;
0000f9 93e0 0097 	STS  151,R30
                 ; 0000 00A4 ICR3L=0x00;
0000fb 93e0 0096 	STS  150,R30
                 ; 0000 00A5 OCR3AH=0x00;
0000fd 93e0 0099 	STS  153,R30
                 ; 0000 00A6 OCR3AL=0x00;
0000ff 93e0 0098 	STS  152,R30
                 ; 0000 00A7 OCR3BH=0x00;
000101 93e0 009b 	STS  155,R30
                 ; 0000 00A8 OCR3BL=0x00;
000103 93e0 009a 	STS  154,R30
                 ; 0000 00A9 OCR3CH=0x00;
000105 93e0 009d 	STS  157,R30
                 ; 0000 00AA OCR3CL=0x00;
000107 93e0 009c 	STS  156,R30
                 ; 0000 00AB 
                 ; 0000 00AC // Timer/Counter 4 initialization
                 ; 0000 00AD // Clock: Timer4 Stopped
                 ; 0000 00AE // Mode: Normal top=OCR4C
                 ; 0000 00AF // OC4A output: OC4A=Disc. /OC4A=Disc.
                 ; 0000 00B0 // OC4B output: OC4B=Disc. /OC4B=Disc.
                 ; 0000 00B1 // OC4D output: OC4D=Disc. /OC4D=Disc.
                 ; 0000 00B2 // Fault Protection: Off
                 ; 0000 00B3 // Fault Protection Noise Canceler: Off
                 ; 0000 00B4 // Fault Protection triggered on Falling Edge
                 ; 0000 00B5 // Timer4 Overflow Interrupt: Off
                 ; 0000 00B6 // Compare A Match Interrupt: Off
                 ; 0000 00B7 // Compare B Match Interrupt: Off
                 ; 0000 00B8 // Compare D Match Interrupt: Off
                 ; 0000 00B9 // Fault Protection Interrupt: Off
                 ; 0000 00BA // Dead Time Prescaler: 1
                 ; 0000 00BB // Dead Time Rising Edge: 0.000 us
                 ; 0000 00BC // Dead Time Falling Edge: 0.000 us
                 ; 0000 00BD 
                 ; 0000 00BE // Set Timer4 for synchronous operation
                 ; 0000 00BF PLLFRQ&=(1<<PINMUX) | (1<<PLLUSB) | (0<<PLLTM1) | (0<<PLLTM0) | (1<<PDIV3) | (1<<PDIV2) | (1<<PDIV1) | (1<<PDIV0);
000109 b7e2      	IN   R30,0x32
00010a 7cef      	ANDI R30,LOW(0xCF)
00010b bfe2      	OUT  0x32,R30
                 ; 0000 00C0 
                 ; 0000 00C1 TCCR4A=(0<<COM4A1) | (0<<COM4A0) | (0<<COM4B1) | (0<<COM4B0) | (0<<FOC4A) | (0<<FOC4B) | (0<<PWM4A) | (0<<PWM4B);
00010c e0e0      	LDI  R30,LOW(0)
00010d 93e0 00c0 	STS  192,R30
                 ; 0000 00C2 TCCR4B=(0<<PWM4X) | (0<<PSR4) | (0<<DTPS41) | (0<<DTPS40) | (0<<CS43) | (0<<CS42) | (0<<CS41) | (0<<CS40);
00010f 93e0 00c1 	STS  193,R30
                 ; 0000 00C3 TCCR4C=(0<<COM4A1S) | (0<<COM4A0S) | (0<<COM4B1S) | (0<<COM4B0S) | (0<<COM4D1) | (0<<COM4D0) | (0<<FOC4D) | (0<<PWM4D);
000111 93e0 00c2 	STS  194,R30
                 ; 0000 00C4 TCCR4D=(0<<FPIE4) | (0<<FPEN4) | (0<<FPNC4) | (0<<FPES4) | (0<<FPAC4) | (0<<FPF4) | (0<<WGM41) | (0<<WGM40);
000113 93e0 00c3 	STS  195,R30
                 ; 0000 00C5 TCCR4E=(0<<TLOCK4) | (0<<ENHC4) | (0<<OC4OE5) | (0<<OC4OE4) | (0<<OC4OE3) | (0<<OC4OE2) | (0<<OC4OE1) | (0<<OC4OE0);
000115 93e0 00c4 	STS  196,R30
                 ; 0000 00C6 TC4H=0x00;
000117 d46b      	RCALL SUBOPT_0x0
                 ; 0000 00C7 TCNT4=0x00;
000118 93e0 00be 	STS  190,R30
                 ; 0000 00C8 TC4H=0x00;
00011a d468      	RCALL SUBOPT_0x0
                 ; 0000 00C9 OCR4A=0x00;
00011b 93e0 00cf 	STS  207,R30
                 ; 0000 00CA TC4H=0x00;
00011d d465      	RCALL SUBOPT_0x0
                 ; 0000 00CB OCR4B=0x00;
00011e 93e0 00d0 	STS  208,R30
                 ; 0000 00CC TC4H=0x00;
000120 d462      	RCALL SUBOPT_0x0
                 ; 0000 00CD OCR4C=0x00;
000121 93e0 00d1 	STS  209,R30
                 ; 0000 00CE TC4H=0x00;
000123 d45f      	RCALL SUBOPT_0x0
                 ; 0000 00CF OCR4D=0x00;
000124 93e0 00d2 	STS  210,R30
                 ; 0000 00D0 DT4=0x00;
000126 e0e0      	LDI  R30,LOW(0)
000127 93e0 00d4 	STS  212,R30
                 ; 0000 00D1 
                 ; 0000 00D2 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 00D3 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
000129 93e0 006e 	STS  110,R30
                 ; 0000 00D4 
                 ; 0000 00D5 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 00D6 TIMSK1=(0<<ICIE1) | (0<<OCIE1C) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
00012b 93e0 006f 	STS  111,R30
                 ; 0000 00D7 
                 ; 0000 00D8 // Timer/Counter 3 Interrupt(s) initialization
                 ; 0000 00D9 TIMSK3=(0<<ICIE3) | (0<<OCIE3C) | (0<<OCIE3B) | (0<<OCIE3A) | (0<<TOIE3);
00012d 93e0 0071 	STS  113,R30
                 ; 0000 00DA 
                 ; 0000 00DB // Timer/Counter 4 Interrupt(s) initialization
                 ; 0000 00DC TIMSK4=(0<<OCIE4D) | (0<<OCIE4A) | (0<<OCIE4B) | (0<<TOIE4);
00012f 93e0 0072 	STS  114,R30
                 ; 0000 00DD 
                 ; 0000 00DE // External Interrupt(s) initialization
                 ; 0000 00DF // INT0: Off
                 ; 0000 00E0 // INT1: Off
                 ; 0000 00E1 // INT2: Off
                 ; 0000 00E2 // INT3: Off
                 ; 0000 00E3 // INT6: Off
                 ; 0000 00E4 EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000131 93e0 0069 	STS  105,R30
                 ; 0000 00E5 EICRB=(0<<ISC61) | (0<<ISC60);
000133 93e0 006a 	STS  106,R30
                 ; 0000 00E6 EIMSK=(0<<INT6) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
000135 bbed      	OUT  0x1D,R30
                 ; 0000 00E7 // PCINT0 interrupt: Off
                 ; 0000 00E8 // PCINT1 interrupt: Off
                 ; 0000 00E9 // PCINT2 interrupt: Off
                 ; 0000 00EA // PCINT3 interrupt: Off
                 ; 0000 00EB // PCINT4 interrupt: Off
                 ; 0000 00EC // PCINT5 interrupt: Off
                 ; 0000 00ED // PCINT6 interrupt: Off
                 ; 0000 00EE // PCINT7 interrupt: Off
                 ; 0000 00EF PCMSK0=(0<<PCINT7) | (0<<PCINT6) | (0<<PCINT5) | (0<<PCINT4) | (0<<PCINT3) | (0<<PCINT2) | (0<<PCINT1) | (0<<PCINT0);
000136 93e0 006b 	STS  107,R30
                 ; 0000 00F0 PCICR=(0<<PCIE0);
000138 93e0 0068 	STS  104,R30
                 ; 0000 00F1 
                 ; 0000 00F2 // USART1 initialization
                 ; 0000 00F3 // USART1 disabled
                 ; 0000 00F4 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
00013a 93e0 00c9 	STS  201,R30
                 ; 0000 00F5 
                 ; 0000 00F6 // Analog Comparator initialization
                 ; 0000 00F7 // Analog Comparator: Off
                 ; 0000 00F8 // The Analog Comparator's positive input is
                 ; 0000 00F9 // connected to the AIN0 pin
                 ; 0000 00FA // The Analog Comparator's negative input is
                 ; 0000 00FB // connected to the AIN1 pin
                 ; 0000 00FC ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00013c e8e0      	LDI  R30,LOW(128)
00013d bfe0      	OUT  0x30,R30
                 ; 0000 00FD ADCSRB=(0<<ACME);
00013e e0e0      	LDI  R30,LOW(0)
00013f 93e0 007b 	STS  123,R30
                 ; 0000 00FE // Digital input buffer on AIN0: On
                 ; 0000 00FF DIDR1=(0<<AIN0D);
000141 93e0 007f 	STS  127,R30
                 ; 0000 0100 
                 ; 0000 0101 // ADC initialization
                 ; 0000 0102 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0103 // ADC Voltage Reference: AVCC pin
                 ; 0000 0104 // ADC High Speed Mode: Off
                 ; 0000 0105 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0106 // Only the 8 most significant bits of
                 ; 0000 0107 // the AD conversion result are used
                 ; 0000 0108 // Digital input buffers on ADC0: On, ADC1: Off
                 ; 0000 0109 // ADC4: On, ADC5: On, ADC6: Off, ADC7: On
                 ; 0000 010A DIDR0=(0<<ADC7D) | (1<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (1<<ADC1D) | (0<<ADC0D);
000143 e4e2      	LDI  R30,LOW(66)
000144 93e0 007e 	STS  126,R30
                 ; 0000 010B // Digital input buffers on ADC8: On, ADC9: On, ADC10: On, ADC11: On
                 ; 0000 010C // ADC12: On, ADC13: On
                 ; 0000 010D DIDR2=(0<<ADC13D) | (0<<ADC12D) | (0<<ADC11D) | (0<<ADC10D) | (0<<ADC9D) | (0<<ADC8D);
000146 e0e0      	LDI  R30,LOW(0)
000147 93e0 007d 	STS  125,R30
                 ; 0000 010E ADMUX=ADC_VREF_TYPE;
000149 e6e0      	LDI  R30,LOW(96)
00014a 93e0 007c 	STS  124,R30
                 ; 0000 010F ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
00014c e8e4      	LDI  R30,LOW(132)
00014d 93e0 007a 	STS  122,R30
                 ; 0000 0110 ADCSRB=(1<<ADHSM) | (0<<MUX5) | (0<<ADTS3) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00014f e8e0      	LDI  R30,LOW(128)
000150 93e0 007b 	STS  123,R30
                 ; 0000 0111 
                 ; 0000 0112 // SPI initialization
                 ; 0000 0113 // SPI Type: Slave
                 ; 0000 0114 // SPI Clock Rate: 4000.000 kHz
                 ; 0000 0115 // SPI Clock Phase: Cycle Start
                 ; 0000 0116 // SPI Clock Polarity: Low
                 ; 0000 0117 // SPI Data Order: MSB First
                 ; 0000 0118 SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000152 e4e0      	LDI  R30,LOW(64)
000153 bdec      	OUT  0x2C,R30
                 ; 0000 0119 SPSR=(0<<SPI2X);
000154 e0e0      	LDI  R30,LOW(0)
000155 bded      	OUT  0x2D,R30
                 ; 0000 011A 
                 ; 0000 011B // TWI initialization
                 ; 0000 011C // Mode: TWI Master
                 ; 0000 011D // Bit Rate: 100 kHz
                 ; 0000 011E twi_master_init(100);
000156 e6a4      	LDI  R26,LOW(100)
000157 e0b0      	LDI  R27,0
000158 d013      	RCALL _twi_master_init
                 ; 0000 011F 
                 ; 0000 0120 // Globally enable interrupts
                 ; 0000 0121 #asm("sei")
000159 9478      	SEI
                 ; 0000 0122 
                 ; 0000 0123 // I2C LCD Shield initialization for TWI
                 ; 0000 0124 // PCF8574 I2C bus address: 0x27
                 ; 0000 0125 // LCD characters/line: 20
                 ; 0000 0126 lcd_twi_init(0x3F,20);
00015a e3ef      	LDI  R30,LOW(63)
00015b 93ea      	ST   -Y,R30
00015c e1a4      	LDI  R26,LOW(20)
00015d d275      	RCALL _lcd_twi_init
                 ; 0000 0127 //lcd_putsf("Prueba Serial");
                 ; 0000 0128 while (1)
                 _0x8:
                 ; 0000 0129 {
                 ; 0000 012A // Place your code here
                 ; 0000 012B lcd_printfxy(1,2,"%u",read_adc(1));
00015e e0e1      	LDI  R30,LOW(1)
00015f 93ea      	ST   -Y,R30
000160 e0e2      	LDI  R30,LOW(2)
000161 d425      	RCALL SUBOPT_0x1
000162 e0a1      	LDI  R26,LOW(1)
000163 d429      	RCALL SUBOPT_0x2
                 ; 0000 012C lcd_printfxy(2,3,"%u",read_adc(6));
000164 e0e2      	LDI  R30,LOW(2)
000165 93ea      	ST   -Y,R30
000166 e0e3      	LDI  R30,LOW(3)
000167 d41f      	RCALL SUBOPT_0x1
000168 e0a6      	LDI  R26,LOW(6)
000169 d423      	RCALL SUBOPT_0x2
                 ; 0000 012D 
                 ; 0000 012E 
                 ; 0000 012F 
                 ; 0000 0130 }
00016a cff3      	RJMP _0x8
                 ; 0000 0131 }
                 _0xB:
00016b cfff      	RJMP _0xB
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 _twi_master_init:
                 ; .FSTART _twi_master_init
00016c d46d      	RCALL __SAVELOCR4
00016d 019d      	MOVW R18,R26
00016e 9af1      	SBI  0x1E,1
00016f e0e7      	LDI  R30,LOW(7)
000170 93e0 0382 	STS  _twi_result,R30
000172 e0e0      	LDI  R30,LOW(0)
000173 93e0 038b 	STS  _twi_slave_rx_handler_G100,R30
000175 93e0 038c 	STS  _twi_slave_rx_handler_G100+1,R30
000177 93e0 038d 	STS  _twi_slave_tx_handler_G100,R30
000179 93e0 038e 	STS  _twi_slave_tx_handler_G100+1,R30
00017b 9859      	CBI  0xB,1
00017c 9858      	CBI  0xB,0
00017d 93e0 00bc 	STS  188,R30
00017f 91e0 00b9 	LDS  R30,185
000181 7fec      	ANDI R30,LOW(0xFC)
000182 93e0 00b9 	STS  185,R30
000184 01f9      	MOVW R30,R18
000185 e4a0      	LDI  R26,LOW(8000)
000186 e1bf      	LDI  R27,HIGH(8000)
000187 d46f      	RCALL __DIVW21U
000188 2f1e      	MOV  R17,R30
000189 3018      	CPI  R17,8
00018a f008      	BRLO _0x2000006
00018b 5018      	SUBI R17,LOW(8)
                 _0x2000006:
00018c 9310 00b8 	STS  184,R17
00018e 91e0 00bc 	LDS  R30,188
000190 78e0      	ANDI R30,LOW(0x80)
000191 64e5      	ORI  R30,LOW(0x45)
000192 93e0 00bc 	STS  188,R30
000194 d44c      	RCALL __LOADLOCR4
000195 9624      	ADIW R28,4
000196 9508      	RET
                 ; .FEND
                 _twi_master_trans:
                 ; .FSTART _twi_master_trans
000197 9724      	SBIW R28,4
000198 d43f      	RCALL __SAVELOCR6
000199 2f1a      	MOV  R17,R26
                +
00019a 852a     +LDD R18 , Y + 10
00019b 853b     +LDD R19 , Y + 10 + 1
                 	__GETWRS 18,19,10
00019c 850c      	LDD  R16,Y+12
                +
00019d 854d     +LDD R20 , Y + 13
00019e 855e     +LDD R21 , Y + 13 + 1
                 	__GETWRS 20,21,13
00019f 9bf1      	SBIS 0x1E,1
0001a0 c055      	RJMP _0x2000007
0001a1 85ef      	LDD  R30,Y+15
0001a2 0fee      	LSL  R30
0001a3 93e0 0383 	STS  _slave_address_G100,R30
                +
0001a5 9340 0384+STS _twi_tx_buffer_G100 + ( 0 ) , R20
0001a7 9350 0385+STS _twi_tx_buffer_G100 + ( 0 ) + 1 , R21
                 	__PUTWMRN _twi_tx_buffer_G100,0,20,21
0001a9 e0e0      	LDI  R30,LOW(0)
0001aa 93e0 0380 	STS  _twi_tx_index,R30
0001ac 9300 0386 	STS  _bytes_to_tx_G100,R16
                +
0001ae 9320 0387+STS _twi_rx_buffer_G100 + ( 0 ) , R18
0001b0 9330 0388+STS _twi_rx_buffer_G100 + ( 0 ) + 1 , R19
                 	__PUTWMRN _twi_rx_buffer_G100,0,18,19
0001b2 93e0 0381 	STS  _twi_rx_index,R30
0001b4 9310 0389 	STS  _bytes_to_rx_G100,R17
0001b6 e0e6      	LDI  R30,LOW(6)
0001b7 93e0 0382 	STS  _twi_result,R30
0001b9 9478      	SEI
0001ba 3000      	CPI  R16,0
0001bb f069      	BREQ _0x2000008
0001bc 2e04      	MOV  R0,R20
0001bd 2a05      	OR   R0,R21
0001be f1b9      	BREQ _0x20E0005
0001bf 3010      	CPI  R17,0
0001c0 f021      	BREQ _0x200000B
0001c1 2400      	CLR  R0
0001c2 1602      	CP   R0,R18
0001c3 0603      	CPC  R0,R19
0001c4 f009      	BREQ _0x200000C
                 _0x200000B:
0001c5 c001      	RJMP _0x200000A
                 _0x200000C:
0001c6 c02f      	RJMP _0x20E0005
                 _0x200000A:
0001c7 9af0      	SBI  0x1E,0
0001c8 c00b      	RJMP _0x200000F
                 _0x2000008:
0001c9 3010      	CPI  R17,0
0001ca f131      	BREQ _0x2000010
0001cb 2e02      	MOV  R0,R18
0001cc 2a03      	OR   R0,R19
0001cd f141      	BREQ _0x20E0005
0001ce 91e0 0383 	LDS  R30,_slave_address_G100
0001d0 60e1      	ORI  R30,1
0001d1 93e0 0383 	STS  _slave_address_G100,R30
0001d3 98f0      	CBI  0x1E,0
                 _0x200000F:
0001d4 98f1      	CBI  0x1E,1
0001d5 91e0 00bc 	LDS  R30,188
0001d7 70ef      	ANDI R30,LOW(0xF)
0001d8 6ae0      	ORI  R30,LOW(0xA0)
0001d9 93e0 00bc 	STS  188,R30
                +
0001db e2e0     +LDI R30 , LOW ( 0x7A120 )
0001dc eaf1     +LDI R31 , HIGH ( 0x7A120 )
0001dd e067     +LDI R22 , BYTE3 ( 0x7A120 )
0001de e070     +LDI R23 , BYTE4 ( 0x7A120 )
                 	__GETD1N 0x7A120
0001df d3b6      	RCALL SUBOPT_0x3
                 _0x2000016:
0001e0 99f1      	SBIC 0x1E,1
0001e1 c00f      	RJMP _0x2000018
                +
0001e2 81ee     +LDD R30 , Y + 6
0001e3 81ff     +LDD R31 , Y + 6 + 1
0001e4 8568     +LDD R22 , Y + 6 + 2
0001e5 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
0001e6 9731      	SBIW R30,1
0001e7 4060      	SBCI R22,0
0001e8 4070      	SBCI R23,0
0001e9 d3ac      	RCALL SUBOPT_0x3
0001ea f429      	BRNE _0x2000019
0001eb e0e5      	LDI  R30,LOW(5)
0001ec 93e0 0382 	STS  _twi_result,R30
0001ee 9af1      	SBI  0x1E,1
0001ef c006      	RJMP _0x20E0005
                 _0x2000019:
0001f0 cfef      	RJMP _0x2000016
                 _0x2000018:
                 _0x2000010:
0001f1 91a0 0382 	LDS  R26,_twi_result
0001f3 e0e0      	LDI  R30,LOW(0)
0001f4 d3fd      	RCALL __EQB12
0001f5 c001      	RJMP _0x20E0004
                 _0x2000007:
                 _0x20E0005:
0001f6 e0e0      	LDI  R30,LOW(0)
                 _0x20E0004:
0001f7 d3e7      	RCALL __LOADLOCR6
0001f8 9660      	ADIW R28,16
0001f9 9508      	RET
                 ; .FEND
                 _twi_int_handler:
                 ; .FSTART _twi_int_handler
0001fa 920a      	ST   -Y,R0
0001fb 921a      	ST   -Y,R1
0001fc 92fa      	ST   -Y,R15
0001fd 936a      	ST   -Y,R22
0001fe 937a      	ST   -Y,R23
0001ff 938a      	ST   -Y,R24
000200 939a      	ST   -Y,R25
000201 93aa      	ST   -Y,R26
000202 93ba      	ST   -Y,R27
000203 93ea      	ST   -Y,R30
000204 93fa      	ST   -Y,R31
000205 b7ef      	IN   R30,SREG
000206 93ea      	ST   -Y,R30
000207 935a      	ST   -Y,R21
000208 934a      	ST   -Y,R20
000209 933a      	ST   -Y,R19
00020a 932a      	ST   -Y,R18
00020b 931a      	ST   -Y,R17
00020c 930a      	ST   -Y,R16
00020d 9110 0381 	LDS  R17,_twi_rx_index
00020f 9100 0380 	LDS  R16,_twi_tx_index
000211 9130 0386 	LDS  R19,_bytes_to_tx_G100
000213 9120 0382 	LDS  R18,_twi_result
000215 2fe1      	MOV  R30,R17
000216 91a0 0387 	LDS  R26,_twi_rx_buffer_G100
000218 91b0 0388 	LDS  R27,_twi_rx_buffer_G100+1
00021a e0f0      	LDI  R31,0
00021b 0fea      	ADD  R30,R26
00021c 1ffb      	ADC  R31,R27
00021d 01af      	MOVW R20,R30
00021e 91e0 00b9 	LDS  R30,185
000220 7fe8      	ANDI R30,LOW(0xF8)
000221 30e8      	CPI  R30,LOW(0x8)
000222 f411      	BRNE _0x2000023
000223 e020      	LDI  R18,LOW(0)
000224 c002      	RJMP _0x2000024
                 _0x2000023:
000225 31e0      	CPI  R30,LOW(0x10)
000226 f419      	BRNE _0x2000025
                 _0x2000024:
000227 91e0 0383 	LDS  R30,_slave_address_G100
000229 c010      	RJMP _0x2000080
                 _0x2000025:
00022a 31e8      	CPI  R30,LOW(0x18)
00022b f011      	BREQ _0x2000029
00022c 32e8      	CPI  R30,LOW(0x28)
00022d f541      	BRNE _0x200002A
                 _0x2000029:
00022e 1703      	CP   R16,R19
00022f f498      	BRSH _0x200002B
000230 2fe0      	MOV  R30,R16
000231 5f0f      	SUBI R16,-1
000232 91a0 0384 	LDS  R26,_twi_tx_buffer_G100
000234 91b0 0385 	LDS  R27,_twi_tx_buffer_G100+1
000236 e0f0      	LDI  R31,0
000237 0fae      	ADD  R26,R30
000238 1fbf      	ADC  R27,R31
000239 91ec      	LD   R30,X
                 _0x2000080:
00023a 93e0 00bb 	STS  187,R30
00023c 91e0 00bc 	LDS  R30,188
00023e 70ef      	ANDI R30,LOW(0xF)
00023f 68e0      	ORI  R30,0x80
000240 93e0 00bc 	STS  188,R30
000242 c012      	RJMP _0x200002C
                 _0x200002B:
000243 91e0 0389 	LDS  R30,_bytes_to_rx_G100
000245 171e      	CP   R17,R30
000246 f468      	BRSH _0x200002D
000247 91e0 0383 	LDS  R30,_slave_address_G100
000249 60e1      	ORI  R30,1
00024a 93e0 0383 	STS  _slave_address_G100,R30
00024c 98f0      	CBI  0x1E,0
00024d 91e0 00bc 	LDS  R30,188
00024f 70ef      	ANDI R30,LOW(0xF)
000250 6ae0      	ORI  R30,LOW(0xA0)
000251 93e0 00bc 	STS  188,R30
000253 c10d      	RJMP _0x2000022
                 _0x200002D:
000254 c038      	RJMP _0x2000030
                 _0x200002C:
000255 c10b      	RJMP _0x2000022
                 _0x200002A:
000256 35e0      	CPI  R30,LOW(0x50)
000257 f431      	BRNE _0x2000031
000258 91e0 00bb 	LDS  R30,187
00025a 01da      	MOVW R26,R20
00025b 93ec      	ST   X,R30
00025c 5f1f      	SUBI R17,-LOW(1)
00025d c002      	RJMP _0x2000032
                 _0x2000031:
00025e 34e0      	CPI  R30,LOW(0x40)
00025f f489      	BRNE _0x2000033
                 _0x2000032:
000260 91e0 0389 	LDS  R30,_bytes_to_rx_G100
000262 50e1      	SUBI R30,LOW(1)
000263 171e      	CP   R17,R30
000264 f028      	BRLO _0x2000034
000265 91e0 00bc 	LDS  R30,188
000267 70ef      	ANDI R30,LOW(0xF)
000268 68e0      	ORI  R30,0x80
000269 c004      	RJMP _0x2000081
                 _0x2000034:
00026a 91e0 00bc 	LDS  R30,188
00026c 70ef      	ANDI R30,LOW(0xF)
00026d 6ce0      	ORI  R30,LOW(0xC0)
                 _0x2000081:
00026e 93e0 00bc 	STS  188,R30
000270 c0f0      	RJMP _0x2000022
                 _0x2000033:
000271 35e8      	CPI  R30,LOW(0x58)
000272 f431      	BRNE _0x2000036
000273 91e0 00bb 	LDS  R30,187
000275 01da      	MOVW R26,R20
000276 93ec      	ST   X,R30
000277 5f1f      	SUBI R17,-LOW(1)
000278 c002      	RJMP _0x2000037
                 _0x2000036:
000279 32e0      	CPI  R30,LOW(0x20)
00027a f409      	BRNE _0x2000038
                 _0x2000037:
00027b c002      	RJMP _0x2000039
                 _0x2000038:
00027c 33e0      	CPI  R30,LOW(0x30)
00027d f409      	BRNE _0x200003A
                 _0x2000039:
00027e c002      	RJMP _0x200003B
                 _0x200003A:
00027f 34e8      	CPI  R30,LOW(0x48)
000280 f469      	BRNE _0x200003C
                 _0x200003B:
000281 3020      	CPI  R18,0
000282 f451      	BRNE _0x200003D
000283 9bf0      	SBIS 0x1E,0
000284 c003      	RJMP _0x200003E
000285 1703      	CP   R16,R19
000286 f028      	BRLO _0x2000040
000287 c005      	RJMP _0x2000041
                 _0x200003E:
000288 91e0 0389 	LDS  R30,_bytes_to_rx_G100
00028a 171e      	CP   R17,R30
00028b f408      	BRSH _0x2000042
                 _0x2000040:
00028c e024      	LDI  R18,LOW(4)
                 _0x2000042:
                 _0x2000041:
                 _0x200003D:
                 _0x2000030:
00028d c0cc      	RJMP _0x2000082
                 _0x200003C:
00028e 33e8      	CPI  R30,LOW(0x38)
00028f f431      	BRNE _0x2000045
000290 e022      	LDI  R18,LOW(2)
000291 91e0 00bc 	LDS  R30,188
000293 70ef      	ANDI R30,LOW(0xF)
000294 68e0      	ORI  R30,0x80
000295 c0c8      	RJMP _0x2000083
                 _0x2000045:
000296 36e8      	CPI  R30,LOW(0x68)
000297 f011      	BREQ _0x2000048
000298 37e8      	CPI  R30,LOW(0x78)
000299 f411      	BRNE _0x2000049
                 _0x2000048:
00029a e022      	LDI  R18,LOW(2)
00029b c005      	RJMP _0x200004A
                 _0x2000049:
00029c 36e0      	CPI  R30,LOW(0x60)
00029d f011      	BREQ _0x200004D
00029e 37e0      	CPI  R30,LOW(0x70)
00029f f4a1      	BRNE _0x200004E
                 _0x200004D:
0002a0 e020      	LDI  R18,LOW(0)
                 _0x200004A:
0002a1 e010      	LDI  R17,LOW(0)
0002a2 98f0      	CBI  0x1E,0
0002a3 91e0 038a 	LDS  R30,_twi_rx_buffer_size_G100
0002a5 30e0      	CPI  R30,0
0002a6 f431      	BRNE _0x2000051
0002a7 e021      	LDI  R18,LOW(1)
0002a8 91e0 00bc 	LDS  R30,188
0002aa 70ef      	ANDI R30,LOW(0xF)
0002ab 68e0      	ORI  R30,0x80
0002ac c004      	RJMP _0x2000084
                 _0x2000051:
0002ad 91e0 00bc 	LDS  R30,188
0002af 70ef      	ANDI R30,LOW(0xF)
0002b0 6ce0      	ORI  R30,LOW(0xC0)
                 _0x2000084:
0002b1 93e0 00bc 	STS  188,R30
0002b3 c0ad      	RJMP _0x2000022
                 _0x200004E:
0002b4 38e0      	CPI  R30,LOW(0x80)
0002b5 f011      	BREQ _0x2000054
0002b6 39e0      	CPI  R30,LOW(0x90)
0002b7 f539      	BRNE _0x2000055
                 _0x2000054:
0002b8 9bf0      	SBIS 0x1E,0
0002b9 c002      	RJMP _0x2000056
0002ba e021      	LDI  R18,LOW(1)
0002bb c09e      	RJMP _0x2000057
                 _0x2000056:
0002bc 91e0 00bb 	LDS  R30,187
0002be 01da      	MOVW R26,R20
0002bf 93ec      	ST   X,R30
0002c0 5f1f      	SUBI R17,-LOW(1)
0002c1 91e0 038a 	LDS  R30,_twi_rx_buffer_size_G100
0002c3 171e      	CP   R17,R30
0002c4 f4c0      	BRSH _0x2000058
0002c5 91e0 038b 	LDS  R30,_twi_slave_rx_handler_G100
0002c7 91f0 038c 	LDS  R31,_twi_slave_rx_handler_G100+1
0002c9 9730      	SBIW R30,0
0002ca f411      	BRNE _0x2000059
0002cb e026      	LDI  R18,LOW(6)
0002cc c08d      	RJMP _0x2000057
                 _0x2000059:
0002cd e0a0      	LDI  R26,LOW(0)
                +
0002ce 91e0 038b+LDS R30 , _twi_slave_rx_handler_G100 + ( 0 )
0002d0 91f0 038c+LDS R31 , _twi_slave_rx_handler_G100 + ( 0 ) + 1
0002d2 9509     +ICALL
                 	__CALL1MN _twi_slave_rx_handler_G100,0
0002d3 30e0      	CPI  R30,0
0002d4 f039      	BREQ _0x200005A
0002d5 91e0 00bc 	LDS  R30,188
0002d7 70ef      	ANDI R30,LOW(0xF)
0002d8 6ce0      	ORI  R30,LOW(0xC0)
0002d9 93e0 00bc 	STS  188,R30
0002db c085      	RJMP _0x2000022
                 _0x200005A:
0002dc c001      	RJMP _0x200005B
                 _0x2000058:
0002dd 9af0      	SBI  0x1E,0
                 _0x200005B:
0002de c002      	RJMP _0x200005E
                 _0x2000055:
0002df 38e8      	CPI  R30,LOW(0x88)
0002e0 f409      	BRNE _0x200005F
                 _0x200005E:
0002e1 c002      	RJMP _0x2000060
                 _0x200005F:
0002e2 39e8      	CPI  R30,LOW(0x98)
0002e3 f439      	BRNE _0x2000061
                 _0x2000060:
0002e4 91e0 00bc 	LDS  R30,188
0002e6 70ef      	ANDI R30,LOW(0xF)
0002e7 68e0      	ORI  R30,0x80
0002e8 93e0 00bc 	STS  188,R30
0002ea c076      	RJMP _0x2000022
                 _0x2000061:
0002eb 3ae0      	CPI  R30,LOW(0xA0)
0002ec f4b1      	BRNE _0x2000062
0002ed 91e0 00bc 	LDS  R30,188
0002ef 70ef      	ANDI R30,LOW(0xF)
0002f0 6ce0      	ORI  R30,LOW(0xC0)
0002f1 93e0 00bc 	STS  188,R30
0002f3 9af1      	SBI  0x1E,1
0002f4 91e0 038b 	LDS  R30,_twi_slave_rx_handler_G100
0002f6 91f0 038c 	LDS  R31,_twi_slave_rx_handler_G100+1
0002f8 9730      	SBIW R30,0
0002f9 f039      	BREQ _0x2000065
0002fa e0a1      	LDI  R26,LOW(1)
                +
0002fb 91e0 038b+LDS R30 , _twi_slave_rx_handler_G100 + ( 0 )
0002fd 91f0 038c+LDS R31 , _twi_slave_rx_handler_G100 + ( 0 ) + 1
0002ff 9509     +ICALL
                 	__CALL1MN _twi_slave_rx_handler_G100,0
000300 c001      	RJMP _0x2000066
                 _0x2000065:
000301 e026      	LDI  R18,LOW(6)
                 _0x2000066:
000302 c05e      	RJMP _0x2000022
                 _0x2000062:
000303 3be0      	CPI  R30,LOW(0xB0)
000304 f411      	BRNE _0x2000067
000305 e022      	LDI  R18,LOW(2)
000306 c002      	RJMP _0x2000068
                 _0x2000067:
000307 3ae8      	CPI  R30,LOW(0xA8)
000308 f4b1      	BRNE _0x2000069
                 _0x2000068:
000309 91e0 038d 	LDS  R30,_twi_slave_tx_handler_G100
00030b 91f0 038e 	LDS  R31,_twi_slave_tx_handler_G100+1
00030d 9730      	SBIW R30,0
00030e f059      	BREQ _0x200006A
00030f e0a0      	LDI  R26,LOW(0)
                +
000310 91e0 038d+LDS R30 , _twi_slave_tx_handler_G100 + ( 0 )
000312 91f0 038e+LDS R31 , _twi_slave_tx_handler_G100 + ( 0 ) + 1
000314 9509     +ICALL
                 	__CALL1MN _twi_slave_tx_handler_G100,0
000315 2f3e      	MOV  R19,R30
000316 30e0      	CPI  R30,0
000317 f011      	BREQ _0x200006C
000318 e020      	LDI  R18,LOW(0)
000319 c002      	RJMP _0x200006D
                 _0x200006A:
                 _0x200006C:
00031a e026      	LDI  R18,LOW(6)
00031b c03e      	RJMP _0x2000057
                 _0x200006D:
00031c e000      	LDI  R16,LOW(0)
00031d 98f0      	CBI  0x1E,0
00031e c002      	RJMP _0x2000070
                 _0x2000069:
00031f 3be8      	CPI  R30,LOW(0xB8)
000320 f4f9      	BRNE _0x2000071
                 _0x2000070:
000321 9bf0      	SBIS 0x1E,0
000322 c002      	RJMP _0x2000072
000323 e021      	LDI  R18,LOW(1)
000324 c035      	RJMP _0x2000057
                 _0x2000072:
000325 2fe0      	MOV  R30,R16
000326 5f0f      	SUBI R16,-1
000327 91a0 0384 	LDS  R26,_twi_tx_buffer_G100
000329 91b0 0385 	LDS  R27,_twi_tx_buffer_G100+1
00032b e0f0      	LDI  R31,0
00032c 0fae      	ADD  R26,R30
00032d 1fbf      	ADC  R27,R31
00032e 91ec      	LD   R30,X
00032f 93e0 00bb 	STS  187,R30
000331 1703      	CP   R16,R19
000332 f428      	BRSH _0x2000073
000333 91e0 00bc 	LDS  R30,188
000335 70ef      	ANDI R30,LOW(0xF)
000336 6ce0      	ORI  R30,LOW(0xC0)
000337 c005      	RJMP _0x2000085
                 _0x2000073:
000338 9af0      	SBI  0x1E,0
000339 91e0 00bc 	LDS  R30,188
00033b 70ef      	ANDI R30,LOW(0xF)
00033c 68e0      	ORI  R30,0x80
                 _0x2000085:
00033d 93e0 00bc 	STS  188,R30
00033f c021      	RJMP _0x2000022
                 _0x2000071:
000340 3ce0      	CPI  R30,LOW(0xC0)
000341 f011      	BREQ _0x2000078
000342 3ce8      	CPI  R30,LOW(0xC8)
000343 f499      	BRNE _0x2000079
                 _0x2000078:
000344 91e0 00bc 	LDS  R30,188
000346 70ef      	ANDI R30,LOW(0xF)
000347 6ce0      	ORI  R30,LOW(0xC0)
000348 93e0 00bc 	STS  188,R30
00034a 91e0 038d 	LDS  R30,_twi_slave_tx_handler_G100
00034c 91f0 038e 	LDS  R31,_twi_slave_tx_handler_G100+1
00034e 9730      	SBIW R30,0
00034f f031      	BREQ _0x200007A
000350 e0a1      	LDI  R26,LOW(1)
                +
000351 91e0 038d+LDS R30 , _twi_slave_tx_handler_G100 + ( 0 )
000353 91f0 038e+LDS R31 , _twi_slave_tx_handler_G100 + ( 0 ) + 1
000355 9509     +ICALL
                 	__CALL1MN _twi_slave_tx_handler_G100,0
                 _0x200007A:
000356 c009      	RJMP _0x2000043
                 _0x2000079:
000357 30e0      	CPI  R30,0
000358 f441      	BRNE _0x2000022
000359 e023      	LDI  R18,LOW(3)
                 _0x2000057:
                 _0x2000082:
00035a 91e0 00bc 	LDS  R30,188
00035c 70ef      	ANDI R30,LOW(0xF)
00035d 6de0      	ORI  R30,LOW(0xD0)
                 _0x2000083:
00035e 93e0 00bc 	STS  188,R30
                 _0x2000043:
000360 9af1      	SBI  0x1E,1
                 _0x2000022:
000361 9310 0381 	STS  _twi_rx_index,R17
000363 9300 0380 	STS  _twi_tx_index,R16
000365 9320 0382 	STS  _twi_result,R18
000367 9330 0386 	STS  _bytes_to_tx_G100,R19
000369 9109      	LD   R16,Y+
00036a 9119      	LD   R17,Y+
00036b 9129      	LD   R18,Y+
00036c 9139      	LD   R19,Y+
00036d 9149      	LD   R20,Y+
00036e 9159      	LD   R21,Y+
00036f 91e9      	LD   R30,Y+
000370 bfef      	OUT  SREG,R30
000371 91f9      	LD   R31,Y+
000372 91e9      	LD   R30,Y+
000373 91b9      	LD   R27,Y+
000374 91a9      	LD   R26,Y+
000375 9199      	LD   R25,Y+
000376 9189      	LD   R24,Y+
000377 9179      	LD   R23,Y+
000378 9169      	LD   R22,Y+
000379 90f9      	LD   R15,Y+
00037a 9019      	LD   R1,Y+
00037b 9009      	LD   R0,Y+
00037c 9518      	RETI
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_setbit_G101:
                 ; .FSTART __lcd_setbit_G101
00037d d21d      	RCALL SUBOPT_0x4
00037e 91a0 0394 	LDS  R26,_bus_data_G101
000380 d221      	RCALL SUBOPT_0x5
000381 c04f      	RJMP _0x20E0002
                 ; .FEND
                 __lcd_clrbit_G101:
                 ; .FSTART __lcd_clrbit_G101
000382 d218      	RCALL SUBOPT_0x4
000383 95e0      	COM  R30
000384 91a0 0394 	LDS  R26,_bus_data_G101
000386 23ea      	AND  R30,R26
000387 d21f      	RCALL SUBOPT_0x6
000388 c048      	RJMP _0x20E0002
                 ; .FEND
                 __lcd_write_nibble_hi_G101:
                 ; .FSTART __lcd_write_nibble_hi_G101
000389 931a      	ST   -Y,R17
00038a 2f1a      	MOV  R17,R26
00038b 91e0 0393 	LDS  R30,__pcf8574_addr_G101
00038d 93ea      	ST   -Y,R30
00038e 91e0 0394 	LDS  R30,_bus_data_G101
000390 70ef      	ANDI R30,LOW(0xF)
000391 2fae      	MOV  R26,R30
000392 2fe1      	MOV  R30,R17
000393 7fe0      	ANDI R30,LOW(0xF0)
000394 d20d      	RCALL SUBOPT_0x5
000395 e0a4      	LDI  R26,LOW(4)
000396 dfe6      	RCALL __lcd_setbit_G101
000397 e0a4      	LDI  R26,LOW(4)
000398 c037      	RJMP _0x20E0003
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000399 93aa      	ST   -Y,R26
00039a 81a8      	LD   R26,Y
00039b dfed      	RCALL __lcd_write_nibble_hi_G101
00039c 81e8          ld    r30,y
00039d 95e2          swap  r30
00039e 83e8          st    y,r30
00039f 81a8      	LD   R26,Y
0003a0 dfe8      	RCALL __lcd_write_nibble_hi_G101
                +
0003a1 ec88     +LDI R24 , LOW ( 200 )
0003a2 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003a3 9701     +SBIW R24 , 1
0003a4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003a5 9621      	ADIW R28,1
0003a6 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0003a7 d203      	RCALL SUBOPT_0x7
0003a8 2fe1      	MOV  R30,R17
0003a9 e0f0      	LDI  R31,0
0003aa 57e1      	SUBI R30,LOW(-__base_y_G101)
0003ab 4ffc      	SBCI R31,HIGH(-__base_y_G101)
0003ac 81e0      	LD   R30,Z
0003ad 0fe0      	ADD  R30,R16
0003ae 2fae      	MOV  R26,R30
0003af dfe9      	RCALL __lcd_write_data
0003b0 2e40      	MOV  R4,R16
0003b1 2e31      	MOV  R3,R17
0003b2 c046      	RJMP _0x20E0001
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0003b3 e0a2      	LDI  R26,LOW(2)
0003b4 d1fb      	RCALL SUBOPT_0x8
0003b5 e0ac      	LDI  R26,LOW(12)
0003b6 dfe2      	RCALL __lcd_write_data
0003b7 e0a1      	LDI  R26,LOW(1)
0003b8 d1f7      	RCALL SUBOPT_0x8
0003b9 e0e0      	LDI  R30,LOW(0)
0003ba 2e3e      	MOV  R3,R30
0003bb 2e4e      	MOV  R4,R30
0003bc 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0003bd 931a      	ST   -Y,R17
0003be 2f1a      	MOV  R17,R26
0003bf 301a      	CPI  R17,10
0003c0 f011      	BREQ _0x2020005
0003c1 1446      	CP   R4,R6
0003c2 f038      	BRLO _0x2020004
                 _0x2020005:
0003c3 e0e0      	LDI  R30,LOW(0)
0003c4 93ea      	ST   -Y,R30
0003c5 9433      	INC  R3
0003c6 2da3      	MOV  R26,R3
0003c7 dfdf      	RCALL _lcd_gotoxy
0003c8 301a      	CPI  R17,10
0003c9 f039      	BREQ _0x20E0002
                 _0x2020004:
0003ca 9443      	INC  R4
0003cb e0a1      	LDI  R26,LOW(1)
0003cc dfb0      	RCALL __lcd_setbit_G101
0003cd 2fa1      	MOV  R26,R17
0003ce dfca      	RCALL __lcd_write_data
0003cf e0a1      	LDI  R26,LOW(1)
                 _0x20E0003:
0003d0 dfb1      	RCALL __lcd_clrbit_G101
                 _0x20E0002:
0003d1 9119      	LD   R17,Y+
0003d2 9508      	RET
                 ; .FEND
                 _lcd_twi_init:
                 ; .FSTART _lcd_twi_init
0003d3 d1d7      	RCALL SUBOPT_0x7
0003d4 9300 0393 	STS  __pcf8574_addr_G101,R16
0003d6 91e0 0393 	LDS  R30,__pcf8574_addr_G101
0003d8 93ea      	ST   -Y,R30
0003d9 e0e8      	LDI  R30,LOW(8)
0003da d1cc      	RCALL SUBOPT_0x6
0003db 2e61      	MOV  R6,R17
0003dc 2fe1      	MOV  R30,R17
0003dd 58e0      	SUBI R30,-LOW(128)
                +
0003de 93e0 0391+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0003e0 2fe1      	MOV  R30,R17
0003e1 54e0      	SUBI R30,-LOW(192)
                +
0003e2 93e0 0392+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0003e4 e1a4      	LDI  R26,LOW(20)
0003e5 e0b0      	LDI  R27,0
0003e6 d230      	RCALL _delay_ms
0003e7 d1cc      	RCALL SUBOPT_0x9
0003e8 d1cb      	RCALL SUBOPT_0x9
0003e9 d1ca      	RCALL SUBOPT_0x9
0003ea e2a0      	LDI  R26,LOW(32)
0003eb df9d      	RCALL __lcd_write_nibble_hi_G101
                +
0003ec e980     +LDI R24 , LOW ( 400 )
0003ed e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
0003ee 9701     +SBIW R24 , 1
0003ef f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
0003f0 e2a8      	LDI  R26,LOW(40)
0003f1 dfa7      	RCALL __lcd_write_data
0003f2 e0a4      	LDI  R26,LOW(4)
0003f3 dfa5      	RCALL __lcd_write_data
0003f4 e8a5      	LDI  R26,LOW(133)
0003f5 dfa3      	RCALL __lcd_write_data
0003f6 e0a6      	LDI  R26,LOW(6)
0003f7 dfa1      	RCALL __lcd_write_data
0003f8 dfba      	RCALL _lcd_clear
                 _0x20E0001:
0003f9 8119      	LDD  R17,Y+1
0003fa 8108      	LDD  R16,Y+0
0003fb 9623      	ADIW R28,3
0003fc 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003fd 93ba      	ST   -Y,R27
0003fe 93aa      	ST   -Y,R26
0003ff 91a9          ld   r26,y+
000400 91b9          ld   r27,y+
000401 27ee          clr  r30
000402 27ff          clr  r31
                 strlen0:
000403 916d          ld   r22,x+
000404 2366          tst  r22
000405 f011          breq strlen1
000406 9631          adiw r30,1
000407 cffb          rjmp strlen0
                 strlen1:
000408 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000409 93ba      	ST   -Y,R27
00040a 93aa      	ST   -Y,R26
00040b 27aa          clr  r26
00040c 27bb          clr  r27
00040d 91e9          ld   r30,y+
00040e 91f9          ld   r31,y+
                 strlenf0:
00040f 9005      	lpm  r0,z+
000410 2000          tst  r0
000411 f011          breq strlenf1
000412 9611          adiw r26,1
000413 cffb          rjmp strlenf0
                 strlenf1:
000414 01fd          movw r30,r26
000415 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _pcf8574_write:
                 ; .FSTART _pcf8574_write
000416 93aa      	ST   -Y,R26
000417 81e9      	LDD  R30,Y+1
000418 93ea      	ST   -Y,R30
000419 01fe      	MOVW R30,R28
00041a 9631      	ADIW R30,1
00041b 93fa      	ST   -Y,R31
00041c 93ea      	ST   -Y,R30
00041d e0e1      	LDI  R30,LOW(1)
00041e 93ea      	ST   -Y,R30
00041f e0e0      	LDI  R30,LOW(0)
000420 e0f0      	LDI  R31,HIGH(0)
000421 93fa      	ST   -Y,R31
000422 93ea      	ST   -Y,R30
000423 e0a0      	LDI  R26,LOW(0)
000424 dd72      	RCALL _twi_master_trans
000425 9622      	ADIW R28,2
000426 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 __print_G105:
                 ; .FSTART __print_G105
000427 93ba      	ST   -Y,R27
000428 93aa      	ST   -Y,R26
000429 9726      	SBIW R28,6
00042a d1ad      	RCALL __SAVELOCR6
00042b e010      	LDI  R17,0
00042c 85ac      	LDD  R26,Y+12
00042d 85bd      	LDD  R27,Y+12+1
00042e e0e0      	LDI  R30,LOW(0)
00042f e0f0      	LDI  R31,HIGH(0)
000430 93ed      	ST   X+,R30
000431 93fc      	ST   X,R31
                 _0x20A001C:
000432 89ea      	LDD  R30,Y+18
000433 89fb      	LDD  R31,Y+18+1
000434 9631      	ADIW R30,1
000435 8bea      	STD  Y+18,R30
000436 8bfb      	STD  Y+18+1,R31
000437 9731      	SBIW R30,1
000438 91e4      	LPM  R30,Z
000439 2f2e      	MOV  R18,R30
00043a 30e0      	CPI  R30,0
00043b f409      	BRNE PC+2
00043c c109      	RJMP _0x20A001E
00043d 2fe1      	MOV  R30,R17
00043e 30e0      	CPI  R30,0
00043f f431      	BRNE _0x20A0022
000440 3225      	CPI  R18,37
000441 f411      	BRNE _0x20A0023
000442 e011      	LDI  R17,LOW(1)
000443 c001      	RJMP _0x20A0024
                 _0x20A0023:
000444 d176      	RCALL SUBOPT_0xA
                 _0x20A0024:
000445 c0ff      	RJMP _0x20A0021
                 _0x20A0022:
000446 30e1      	CPI  R30,LOW(0x1)
000447 f4a1      	BRNE _0x20A0025
000448 3225      	CPI  R18,37
000449 f411      	BRNE _0x20A0026
00044a d170      	RCALL SUBOPT_0xA
00044b c0f8      	RJMP _0x20A00D2
                 _0x20A0026:
00044c e012      	LDI  R17,LOW(2)
00044d e040      	LDI  R20,LOW(0)
00044e e000      	LDI  R16,LOW(0)
00044f 322d      	CPI  R18,45
000450 f411      	BRNE _0x20A0027
000451 e001      	LDI  R16,LOW(1)
000452 c0f2      	RJMP _0x20A0021
                 _0x20A0027:
000453 322b      	CPI  R18,43
000454 f411      	BRNE _0x20A0028
000455 e24b      	LDI  R20,LOW(43)
000456 c0ee      	RJMP _0x20A0021
                 _0x20A0028:
000457 3220      	CPI  R18,32
000458 f411      	BRNE _0x20A0029
000459 e240      	LDI  R20,LOW(32)
00045a c0ea      	RJMP _0x20A0021
                 _0x20A0029:
00045b c002      	RJMP _0x20A002A
                 _0x20A0025:
00045c 30e2      	CPI  R30,LOW(0x2)
00045d f439      	BRNE _0x20A002B
                 _0x20A002A:
00045e e050      	LDI  R21,LOW(0)
00045f e013      	LDI  R17,LOW(3)
000460 3320      	CPI  R18,48
000461 f411      	BRNE _0x20A002C
000462 6800      	ORI  R16,LOW(128)
000463 c0e1      	RJMP _0x20A0021
                 _0x20A002C:
000464 c003      	RJMP _0x20A002D
                 _0x20A002B:
000465 30e3      	CPI  R30,LOW(0x3)
000466 f009      	BREQ PC+2
000467 c0dd      	RJMP _0x20A0021
                 _0x20A002D:
000468 3320      	CPI  R18,48
000469 f010      	BRLO _0x20A0030
00046a 332a      	CPI  R18,58
00046b f008      	BRLO _0x20A0031
                 _0x20A0030:
00046c c007      	RJMP _0x20A002F
                 _0x20A0031:
00046d e0aa      	LDI  R26,LOW(10)
00046e 9f5a      	MUL  R21,R26
00046f 2d50      	MOV  R21,R0
000470 2fe2      	MOV  R30,R18
000471 53e0      	SUBI R30,LOW(48)
000472 0f5e      	ADD  R21,R30
000473 c0d1      	RJMP _0x20A0021
                 _0x20A002F:
000474 2fe2      	MOV  R30,R18
000475 36e3      	CPI  R30,LOW(0x63)
000476 f439      	BRNE _0x20A0035
000477 d14a      	RCALL SUBOPT_0xB
000478 89e8      	LDD  R30,Y+16
000479 89f9      	LDD  R31,Y+16+1
00047a 81a4      	LDD  R26,Z+4
00047b 93aa      	ST   -Y,R26
00047c d14b      	RCALL SUBOPT_0xC
00047d c0c6      	RJMP _0x20A0036
                 _0x20A0035:
00047e 37e3      	CPI  R30,LOW(0x73)
00047f f429      	BRNE _0x20A0038
000480 d141      	RCALL SUBOPT_0xB
000481 d14c      	RCALL SUBOPT_0xD
000482 df7a      	RCALL _strlen
000483 2f1e      	MOV  R17,R30
000484 c007      	RJMP _0x20A0039
                 _0x20A0038:
000485 37e0      	CPI  R30,LOW(0x70)
000486 f449      	BRNE _0x20A003B
000487 d13a      	RCALL SUBOPT_0xB
000488 d145      	RCALL SUBOPT_0xD
000489 df7f      	RCALL _strlenf
00048a 2f1e      	MOV  R17,R30
00048b 6008      	ORI  R16,LOW(8)
                 _0x20A0039:
00048c 6002      	ORI  R16,LOW(2)
00048d 770f      	ANDI R16,LOW(127)
00048e e030      	LDI  R19,LOW(0)
00048f c038      	RJMP _0x20A003C
                 _0x20A003B:
000490 36e4      	CPI  R30,LOW(0x64)
000491 f011      	BREQ _0x20A003F
000492 36e9      	CPI  R30,LOW(0x69)
000493 f411      	BRNE _0x20A0040
                 _0x20A003F:
000494 6004      	ORI  R16,LOW(4)
000495 c002      	RJMP _0x20A0041
                 _0x20A0040:
000496 37e5      	CPI  R30,LOW(0x75)
000497 f431      	BRNE _0x20A0042
                 _0x20A0041:
000498 eaec      	LDI  R30,LOW(_tbl10_G105*2)
000499 e0f0      	LDI  R31,HIGH(_tbl10_G105*2)
00049a 83ee      	STD  Y+6,R30
00049b 83ff      	STD  Y+6+1,R31
00049c e015      	LDI  R17,LOW(5)
00049d c00c      	RJMP _0x20A0043
                 _0x20A0042:
00049e 35e8      	CPI  R30,LOW(0x58)
00049f f411      	BRNE _0x20A0045
0004a0 6008      	ORI  R16,LOW(8)
0004a1 c003      	RJMP _0x20A0046
                 _0x20A0045:
0004a2 37e8      	CPI  R30,LOW(0x78)
0004a3 f009      	BREQ PC+2
0004a4 c09f      	RJMP _0x20A0077
                 _0x20A0046:
0004a5 ebe6      	LDI  R30,LOW(_tbl16_G105*2)
0004a6 e0f0      	LDI  R31,HIGH(_tbl16_G105*2)
0004a7 83ee      	STD  Y+6,R30
0004a8 83ff      	STD  Y+6+1,R31
0004a9 e014      	LDI  R17,LOW(4)
                 _0x20A0043:
0004aa ff02      	SBRS R16,2
0004ab c015      	RJMP _0x20A0048
0004ac d115      	RCALL SUBOPT_0xB
0004ad 89a8      	LDD  R26,Y+16
0004ae 89b9      	LDD  R27,Y+16+1
0004af 9614      	ADIW R26,4
0004b0 91ed      	LD   R30,X+
0004b1 91fd      	LD   R31,X+
0004b2 87ea      	STD  Y+10,R30
0004b3 87fb      	STD  Y+10+1,R31
0004b4 85ab      	LDD  R26,Y+11
0004b5 23aa      	TST  R26
0004b6 f422      	BRPL _0x20A0049
0004b7 d136      	RCALL __ANEGW1
0004b8 87ea      	STD  Y+10,R30
0004b9 87fb      	STD  Y+10+1,R31
0004ba e24d      	LDI  R20,LOW(45)
                 _0x20A0049:
0004bb 3040      	CPI  R20,0
0004bc f011      	BREQ _0x20A004A
0004bd 5f1f      	SUBI R17,-LOW(1)
0004be c001      	RJMP _0x20A004B
                 _0x20A004A:
0004bf 7f0b      	ANDI R16,LOW(251)
                 _0x20A004B:
0004c0 c007      	RJMP _0x20A004C
                 _0x20A0048:
0004c1 d100      	RCALL SUBOPT_0xB
0004c2 89a8      	LDD  R26,Y+16
0004c3 89b9      	LDD  R27,Y+16+1
0004c4 9614      	ADIW R26,4
0004c5 d144      	RCALL __GETW1P
0004c6 87ea      	STD  Y+10,R30
0004c7 87fb      	STD  Y+10+1,R31
                 _0x20A004C:
                 _0x20A003C:
0004c8 fd00      	SBRC R16,0
0004c9 c010      	RJMP _0x20A004D
                 _0x20A004E:
0004ca 1715      	CP   R17,R21
0004cb f470      	BRSH _0x20A0050
0004cc ff07      	SBRS R16,7
0004cd c008      	RJMP _0x20A0051
0004ce ff02      	SBRS R16,2
0004cf c004      	RJMP _0x20A0052
0004d0 7f0b      	ANDI R16,LOW(251)
0004d1 2f24      	MOV  R18,R20
0004d2 5011      	SUBI R17,LOW(1)
0004d3 c001      	RJMP _0x20A0053
                 _0x20A0052:
0004d4 e320      	LDI  R18,LOW(48)
                 _0x20A0053:
0004d5 c001      	RJMP _0x20A0054
                 _0x20A0051:
0004d6 e220      	LDI  R18,LOW(32)
                 _0x20A0054:
0004d7 d0e3      	RCALL SUBOPT_0xA
0004d8 5051      	SUBI R21,LOW(1)
0004d9 cff0      	RJMP _0x20A004E
                 _0x20A0050:
                 _0x20A004D:
0004da 2f31      	MOV  R19,R17
0004db ff01      	SBRS R16,1
0004dc c016      	RJMP _0x20A0055
                 _0x20A0056:
0004dd 3030      	CPI  R19,0
0004de f099      	BREQ _0x20A0058
0004df ff03      	SBRS R16,3
0004e0 c006      	RJMP _0x20A0059
0004e1 81ee      	LDD  R30,Y+6
0004e2 81ff      	LDD  R31,Y+6+1
0004e3 9125      	LPM  R18,Z+
0004e4 83ee      	STD  Y+6,R30
0004e5 83ff      	STD  Y+6+1,R31
0004e6 c005      	RJMP _0x20A005A
                 _0x20A0059:
0004e7 81ae      	LDD  R26,Y+6
0004e8 81bf      	LDD  R27,Y+6+1
0004e9 912d      	LD   R18,X+
0004ea 83ae      	STD  Y+6,R26
0004eb 83bf      	STD  Y+6+1,R27
                 _0x20A005A:
0004ec d0ce      	RCALL SUBOPT_0xA
0004ed 3050      	CPI  R21,0
0004ee f009      	BREQ _0x20A005B
0004ef 5051      	SUBI R21,LOW(1)
                 _0x20A005B:
0004f0 5031      	SUBI R19,LOW(1)
0004f1 cfeb      	RJMP _0x20A0056
                 _0x20A0058:
0004f2 c048      	RJMP _0x20A005C
                 _0x20A0055:
                 _0x20A005E:
0004f3 e320      	LDI  R18,LOW(48)
0004f4 81ee      	LDD  R30,Y+6
0004f5 81ff      	LDD  R31,Y+6+1
0004f6 d117      	RCALL __GETW1PF
0004f7 87e8      	STD  Y+8,R30
0004f8 87f9      	STD  Y+8+1,R31
0004f9 81ee      	LDD  R30,Y+6
0004fa 81ff      	LDD  R31,Y+6+1
0004fb 9632      	ADIW R30,2
0004fc 83ee      	STD  Y+6,R30
0004fd 83ff      	STD  Y+6+1,R31
                 _0x20A0060:
0004fe 85e8      	LDD  R30,Y+8
0004ff 85f9      	LDD  R31,Y+8+1
000500 85aa      	LDD  R26,Y+10
000501 85bb      	LDD  R27,Y+10+1
000502 17ae      	CP   R26,R30
000503 07bf      	CPC  R27,R31
000504 f050      	BRLO _0x20A0062
000505 5f2f      	SUBI R18,-LOW(1)
000506 85a8      	LDD  R26,Y+8
000507 85b9      	LDD  R27,Y+8+1
000508 85ea      	LDD  R30,Y+10
000509 85fb      	LDD  R31,Y+10+1
00050a 1bea      	SUB  R30,R26
00050b 0bfb      	SBC  R31,R27
00050c 87ea      	STD  Y+10,R30
00050d 87fb      	STD  Y+10+1,R31
00050e cfef      	RJMP _0x20A0060
                 _0x20A0062:
00050f 332a      	CPI  R18,58
000510 f028      	BRLO _0x20A0063
000511 ff03      	SBRS R16,3
000512 c002      	RJMP _0x20A0064
000513 5f29      	SUBI R18,-LOW(7)
000514 c001      	RJMP _0x20A0065
                 _0x20A0064:
000515 5d29      	SUBI R18,-LOW(39)
                 _0x20A0065:
                 _0x20A0063:
000516 fd04      	SBRC R16,4
000517 c019      	RJMP _0x20A0067
000518 3321      	CPI  R18,49
000519 f420      	BRSH _0x20A0069
00051a 85a8      	LDD  R26,Y+8
00051b 85b9      	LDD  R27,Y+8+1
00051c 9711      	SBIW R26,1
00051d f409      	BRNE _0x20A0068
                 _0x20A0069:
00051e c009      	RJMP _0x20A00D3
                 _0x20A0068:
00051f 1753      	CP   R21,R19
000520 f010      	BRLO _0x20A006D
000521 ff00      	SBRS R16,0
000522 c001      	RJMP _0x20A006E
                 _0x20A006D:
000523 c011      	RJMP _0x20A006C
                 _0x20A006E:
000524 e220      	LDI  R18,LOW(32)
000525 ff07      	SBRS R16,7
000526 c00a      	RJMP _0x20A006F
000527 e320      	LDI  R18,LOW(48)
                 _0x20A00D3:
000528 6100      	ORI  R16,LOW(16)
000529 ff02      	SBRS R16,2
00052a c006      	RJMP _0x20A0070
00052b 7f0b      	ANDI R16,LOW(251)
00052c 934a      	ST   -Y,R20
00052d d09a      	RCALL SUBOPT_0xC
00052e 3050      	CPI  R21,0
00052f f009      	BREQ _0x20A0071
000530 5051      	SUBI R21,LOW(1)
                 _0x20A0071:
                 _0x20A0070:
                 _0x20A006F:
                 _0x20A0067:
000531 d089      	RCALL SUBOPT_0xA
000532 3050      	CPI  R21,0
000533 f009      	BREQ _0x20A0072
000534 5051      	SUBI R21,LOW(1)
                 _0x20A0072:
                 _0x20A006C:
000535 5031      	SUBI R19,LOW(1)
000536 85a8      	LDD  R26,Y+8
000537 85b9      	LDD  R27,Y+8+1
000538 9712      	SBIW R26,2
000539 f008      	BRLO _0x20A005F
00053a cfb8      	RJMP _0x20A005E
                 _0x20A005F:
                 _0x20A005C:
00053b ff00      	SBRS R16,0
00053c c007      	RJMP _0x20A0073
                 _0x20A0074:
00053d 3050      	CPI  R21,0
00053e f029      	BREQ _0x20A0076
00053f 5051      	SUBI R21,LOW(1)
000540 e2e0      	LDI  R30,LOW(32)
000541 93ea      	ST   -Y,R30
000542 d085      	RCALL SUBOPT_0xC
000543 cff9      	RJMP _0x20A0074
                 _0x20A0076:
                 _0x20A0073:
                 _0x20A0077:
                 _0x20A0036:
                 _0x20A00D2:
000544 e010      	LDI  R17,LOW(0)
                 _0x20A0021:
000545 ceec      	RJMP _0x20A001C
                 _0x20A001E:
000546 85ac      	LDD  R26,Y+12
000547 85bd      	LDD  R27,Y+12+1
000548 91ed      	LD   R30,X+
000549 91fd      	LD   R31,X+
00054a d094      	RCALL __LOADLOCR6
00054b 9664      	ADIW R28,20
00054c 9508      	RET
                 ; .FEND
                 _put_lcd_G105:
                 ; .FSTART _put_lcd_G105
00054d d08c      	RCALL __SAVELOCR4
00054e 018d      	MOVW R16,R26
00054f 813c      	LDD  R19,Y+4
000550 2fa3      	MOV  R26,R19
000551 de6b      	RCALL _lcd_putchar
000552 01d8      	MOVW R26,R16
000553 91ed      	LD   R30,X+
000554 91fd      	LD   R31,X+
000555 9631      	ADIW R30,1
000556 93fe      	ST   -X,R31
000557 93ee      	ST   -X,R30
000558 d088      	RCALL __LOADLOCR4
000559 9625      	ADIW R28,5
00055a 9508      	RET
                 ; .FEND
                 _lcd_printfxy:
                 ; .FSTART _lcd_printfxy
00055b 92ff      	PUSH R15
00055c 2ef8      	MOV  R15,R24
00055d 9726      	SBIW R28,6
00055e d07b      	RCALL __SAVELOCR4
00055f 01fe      	MOVW R30,R28
000560 d085      	RCALL __ADDW1R15
000561 8534      	LDD  R19,Z+12
000562 8525      	LDD  R18,Z+13
000563 01de      	MOVW R26,R28
000564 9616      	ADIW R26,6
000565 d084      	RCALL __ADDW2R15
000566 018d      	MOVW R16,R26
000567 e0e0      	LDI  R30,LOW(0)
000568 83ee      	STD  Y+6,R30
000569 83ef      	STD  Y+6+1,R30
00056a 87e8      	STD  Y+8,R30
00056b 87e9      	STD  Y+8+1,R30
00056c 932a      	ST   -Y,R18
00056d 2fa3      	MOV  R26,R19
00056e de38      	RCALL _lcd_gotoxy
00056f 01de      	MOVW R26,R28
000570 961a      	ADIW R26,10
000571 d078      	RCALL __ADDW2R15
000572 91ed      	LD   R30,X+
000573 91fd      	LD   R31,X+
000574 93fa      	ST   -Y,R31
000575 93ea      	ST   -Y,R30
000576 931a      	ST   -Y,R17
000577 930a      	ST   -Y,R16
000578 e4ed      	LDI  R30,LOW(_put_lcd_G105)
000579 e0f5      	LDI  R31,HIGH(_put_lcd_G105)
00057a 93fa      	ST   -Y,R31
00057b 93ea      	ST   -Y,R30
00057c 01de      	MOVW R26,R28
00057d 961a      	ADIW R26,10
00057e dea8      	RCALL __print_G105
00057f d061      	RCALL __LOADLOCR4
000580 962a      	ADIW R28,10
000581 90ff      	POP  R15
000582 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _twi_tx_index:
000380           	.BYTE 0x1
                 _twi_rx_index:
000381           	.BYTE 0x1
                 _twi_result:
000382           	.BYTE 0x1
                 _slave_address_G100:
000383           	.BYTE 0x1
                 _twi_tx_buffer_G100:
000384           	.BYTE 0x2
                 _bytes_to_tx_G100:
000386           	.BYTE 0x1
                 _twi_rx_buffer_G100:
000387           	.BYTE 0x2
                 _bytes_to_rx_G100:
000389           	.BYTE 0x1
                 _twi_rx_buffer_size_G100:
00038a           	.BYTE 0x1
                 _twi_slave_rx_handler_G100:
00038b           	.BYTE 0x2
                 _twi_slave_tx_handler_G100:
00038d           	.BYTE 0x2
                 __base_y_G101:
00038f           	.BYTE 0x4
                 __pcf8574_addr_G101:
000393           	.BYTE 0x1
                 _bus_data_G101:
000394           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x0:
000583 e0e0      	LDI  R30,LOW(0)
000584 93e0 00bf 	STS  191,R30
000586 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000587 93ea      	ST   -Y,R30
                +
000588 ebee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000589 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00058a 93fa      	ST   -Y,R31
00058b 93ea      	ST   -Y,R30
00058c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
00058d db0b      	RCALL _read_adc
00058e 27ff      	CLR  R31
00058f 2766      	CLR  R22
000590 2777      	CLR  R23
000591 d080      	RCALL __PUTPARD1
000592 e084      	LDI  R24,4
000593 dfc7      	RCALL _lcd_printfxy
000594 9628      	ADIW R28,8
000595 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
                +
000596 83ee     +STD Y + 6 , R30
000597 83ff     +STD Y + 6 + 1 , R31
000598 8768     +STD Y + 6 + 2 , R22
000599 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
00059a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
00059b 931a      	ST   -Y,R17
00059c 2f1a      	MOV  R17,R26
00059d 91e0 0393 	LDS  R30,__pcf8574_addr_G101
00059f 93ea      	ST   -Y,R30
0005a0 2fe1      	MOV  R30,R17
0005a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
0005a2 2bea      	OR   R30,R26
0005a3 93e0 0394 	STS  _bus_data_G101,R30
0005a5 2fae      	MOV  R26,R30
0005a6 ce6f      	RJMP _pcf8574_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0005a7 93e0 0394 	STS  _bus_data_G101,R30
0005a9 2fae      	MOV  R26,R30
0005aa ce6b      	RJMP _pcf8574_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0005ab 931a      	ST   -Y,R17
0005ac 930a      	ST   -Y,R16
0005ad 2f1a      	MOV  R17,R26
0005ae 810a      	LDD  R16,Y+2
0005af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0005b0 dde8      	RCALL __lcd_write_data
0005b1 e0a3      	LDI  R26,LOW(3)
0005b2 e0b0      	LDI  R27,0
0005b3 c063      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x9:
0005b4 e3a0      	LDI  R26,LOW(48)
0005b5 ddd3      	RCALL __lcd_write_nibble_hi_G101
                +
0005b6 e980     +LDI R24 , LOW ( 400 )
0005b7 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
0005b8 9701     +SBIW R24 , 1
0005b9 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
0005ba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xA:
0005bb 932a      	ST   -Y,R18
0005bc 85ad      	LDD  R26,Y+13
0005bd 85be      	LDD  R27,Y+13+1
0005be 85ef      	LDD  R30,Y+15
0005bf 89f8      	LDD  R31,Y+15+1
0005c0 9509      	ICALL
0005c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0xB:
0005c2 89e8      	LDD  R30,Y+16
0005c3 89f9      	LDD  R31,Y+16+1
0005c4 9734      	SBIW R30,4
0005c5 8be8      	STD  Y+16,R30
0005c6 8bf9      	STD  Y+16+1,R31
0005c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xC:
0005c8 85ad      	LDD  R26,Y+13
0005c9 85be      	LDD  R27,Y+13+1
0005ca 85ef      	LDD  R30,Y+15
0005cb 89f8      	LDD  R31,Y+15+1
0005cc 9509      	ICALL
0005cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xD:
0005ce 89a8      	LDD  R26,Y+16
0005cf 89b9      	LDD  R27,Y+16+1
0005d0 9614      	ADIW R26,4
0005d1 91ed      	LD   R30,X+
0005d2 91fd      	LD   R31,X+
0005d3 83ee      	STD  Y+6,R30
0005d4 83ff      	STD  Y+6+1,R31
0005d5 81ae      	LDD  R26,Y+6
0005d6 81bf      	LDD  R27,Y+6+1
0005d7 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0005d8 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005d9 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005da 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005db 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005dc 931a      	ST   -Y,R17
0005dd 930a      	ST   -Y,R16
0005de 9508      	RET
                 
                 __LOADLOCR6:
0005df 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0005e0 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0005e1 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005e2 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005e3 8119      	LDD  R17,Y+1
0005e4 8108      	LD   R16,Y
0005e5 9508      	RET
                 
                 __ADDW1R15:
0005e6 2400      	CLR  R0
0005e7 0def      	ADD  R30,R15
0005e8 1df0      	ADC  R31,R0
0005e9 9508      	RET
                 
                 __ADDW2R15:
0005ea 2400      	CLR  R0
0005eb 0daf      	ADD  R26,R15
0005ec 1db0      	ADC  R27,R0
0005ed 9508      	RET
                 
                 __ANEGW1:
0005ee 95f1      	NEG  R31
0005ef 95e1      	NEG  R30
0005f0 40f0      	SBCI R31,0
0005f1 9508      	RET
                 
                 __EQB12:
0005f2 17ea      	CP   R30,R26
0005f3 e0e1      	LDI  R30,1
0005f4 f009      	BREQ __EQB12T
0005f5 27ee      	CLR  R30
                 __EQB12T:
0005f6 9508      	RET
                 
                 __DIVW21U:
0005f7 2400      	CLR  R0
0005f8 2411      	CLR  R1
0005f9 e190      	LDI  R25,16
                 __DIVW21U1:
0005fa 0faa      	LSL  R26
0005fb 1fbb      	ROL  R27
0005fc 1c00      	ROL  R0
0005fd 1c11      	ROL  R1
0005fe 1a0e      	SUB  R0,R30
0005ff 0a1f      	SBC  R1,R31
000600 f418      	BRCC __DIVW21U2
000601 0e0e      	ADD  R0,R30
000602 1e1f      	ADC  R1,R31
000603 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000604 60a1      	SBR  R26,1
                 __DIVW21U3:
000605 959a      	DEC  R25
000606 f799      	BRNE __DIVW21U1
000607 01fd      	MOVW R30,R26
000608 01d0      	MOVW R26,R0
000609 9508      	RET
                 
                 __GETW1P:
00060a 91ed      	LD   R30,X+
00060b 91fc      	LD   R31,X
00060c 9711      	SBIW R26,1
00060d 9508      	RET
                 
                 __GETW1PF:
00060e 9005      	LPM  R0,Z+
00060f 91f4      	LPM  R31,Z
000610 2de0      	MOV  R30,R0
000611 9508      	RET
                 
                 __PUTPARD1:
000612 937a      	ST   -Y,R23
000613 936a      	ST   -Y,R22
000614 93fa      	ST   -Y,R31
000615 93ea      	ST   -Y,R30
000616 9508      	RET
                 
                 _delay_ms:
000617 9610      	adiw r26,0
000618 f039      	breq __delay_ms1
                 __delay_ms0:
000619 95a8      	wdr
                +
00061a ea80     +LDI R24 , LOW ( 0xFA0 )
00061b e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
00061c 9701     +SBIW R24 , 1
00061d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00061e 9711      	sbiw r26,1
00061f f7c9      	brne __delay_ms0
                 __delay_ms1:
000620 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32U4 register use summary:
r0 :  27 r1 :   7 r2 :   0 r3 :   4 r4 :   4 r5 :   0 r6 :   2 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   7 
r16:  51 r17:  62 r18:  54 r19:  24 r20:  18 r21:  22 r22:  12 r23:   8 
r24:  21 r25:  10 r26: 115 r27:  38 r28:  18 r29:   1 r30: 446 r31:  77 
x  :  26 y  : 198 z  :  16 
Registers used: 25 out of 35 (71.4%)

ATmega32U4 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   8 
adiw  :  22 and   :   1 andi  :  28 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  33 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   0 brmi  :   0 brne  :  52 brpl  :   1 brsh  :   7 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  15 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   1 
cp    :  13 cpc   :   2 cpi   :  65 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   6 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  45 ld    :  44 ldd   :  70 ldi   : 146 
lds   :  68 lpm   :  14 lsl   :   2 lsr   :   0 mov   :  43 movw  :  20 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   3 
ori   :  28 out   :  29 pop   :   1 push  :   1 rcall :  86 ret   :  34 
reti  :   1 rjmp  : 108 rol   :   3 ror   :   0 sbc   :   2 sbci  :   4 
sbi   :   7 sbic  :   1 sbis  :   4 sbiw  :  21 sbr   :   1 sbrc  :   2 
sbrs  :  11 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  80 std   :  34 sts   : 102 sub   :   2 subi  :  23 swap  :   1 
tst   :   3 wdr   :   1 
Instructions used: 61 out of 116 (52.6%)

ATmega32U4 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000c42   3098     40   3138   32768   9.6%
[.dseg] 0x000100 0x000395      0     21     21    2560   0.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
